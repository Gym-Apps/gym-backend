// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"

	models "github.com/Gym-Apps/gym-backend/models"

	time "time"
)

// IUtils is an autogenerated mock type for the IUtils type
type IUtils struct {
	mock.Mock
}

// EqualPassword provides a mock function with given fields: old, new
func (_m *IUtils) EqualPassword(old string, new string) bool {
	ret := _m.Called(old, new)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(old, new)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// EuToTime provides a mock function with given fields: StringDate
func (_m *IUtils) EuToTime(StringDate string) (time.Time, error) {
	ret := _m.Called(StringDate)

	var r0 time.Time
	if rf, ok := ret.Get(0).(func(string) time.Time); ok {
		r0 = rf(StringDate)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(StringDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratePassword provides a mock function with given fields: password
func (_m *IUtils) GeneratePassword(password string) (string, error) {
	ret := _m.Called(password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: c
func (_m *IUtils) GetUser(c *echo.Context) models.User {
	ret := _m.Called(c)

	var r0 models.User
	if rf, ok := ret.Get(0).(func(*echo.Context) models.User); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	return r0
}

type mockConstructorTestingTNewIUtils interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUtils creates a new instance of IUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUtils(t mockConstructorTestingTNewIUtils) *IUtils {
	mock := &IUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
